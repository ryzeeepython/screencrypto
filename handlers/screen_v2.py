from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
import re

from states.screenv2_states import screenv2_states
from dispatcher import dp, bot
from aiogram import types
from aiogram.types.input_file import InputFile
from aiogram.dispatcher.filters import Text
from main.screenv2 import DrawScreen2
from main.users import Users
import logging 


DrawScreen = DrawScreen2()
Users = Users()

list_button_name = ['–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω', 'üö® –ò–Ω—Ñ–æ']
list_of_birges = ['BingX', 'Binance']
keyboard = types.ReplyKeyboardMarkup(resize_keyboard= True)
keyboard.add(*list_button_name)
markup = keyboard
keyboardofbirges = types.ReplyKeyboardMarkup(resize_keyboard= True)
keyboardofbirges.add(*list_of_birges)



@dp.message_handler(Text(equals='–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)'))
@dp.message_handler(Command('make_screen_v2'))
async def main(message: types.Message):
    if Users.check_is_paid(message.from_user.username): 
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã', reply_markup=markup)
        await screenv2_states.Q1.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @s_ryzeee')
    
@dp.message_handler(state=screenv2_states.Q1)
async def main(message: types.Message, state: FSMContext):
    answer = message.text
    if len(answer) > 10:
        await state.finish()
        await message.answer('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)
    else:
        await state.update_data(coin_name = answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä "Long" –∏–ª–∏ "Short"')
        await screenv2_states.next()


@dp.message_handler(state=screenv2_states.Q2)
async def main(message: types.Message, state: FSMContext):
    answer = message.text.lstrip().lower()
    if answer != 'long' and answer != "short":
        await state.finish()
        await message.answer(f'–û—à–∏–±–∫–∞, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ "Long" –∏–ª–∏ "Short"')
        await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)
    else:
        await state.update_data(type = answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–ª–µ—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "20" ')
        await screenv2_states.next()

@dp.message_handler(state=screenv2_states.Q3)
async def main(message: types.Message, state: FSMContext):
    answer = message.text.lstrip().lower()
    if len(answer) > 5 or not(answer.isdigit()):
        await state.finish()
        await message.answer(f'–û—à–∏–±–∫–∞, –ø–ª–µ—á–æ –Ω—É–∂–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞–º–∏. –ê —Ç–∞–∫–∂–µ –æ–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ')
        await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)
    else:
        await state.update_data(leverage = answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∂—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "20" ')
        await screenv2_states.next()

@dp.message_handler(state=screenv2_states.Q4)
async def main(message: types.Message, state: FSMContext):
    answer = message.text.lstrip().lower()
    if not(DrawScreen.is_number(answer)):
        await state.finish()
        await message.answer(f'–û—à–∏–±–∫–∞, –º–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)
    else:
        await state.update_data(marge = answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞(entry price), –Ω–∞–ø—Ä–∏–º–µ—Ä "1566" ')
        await screenv2_states.next()

@dp.message_handler(state=screenv2_states.Q5)
async def main(message: types.Message, state: FSMContext):
    answer = message.text.lstrip().lower()
    if not(DrawScreen.is_number(answer)):
        await state.finish()
        await message.answer(f'–û—à–∏–±–∫–∞, —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)
    else:
        await state.update_data(entry_price =answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É(current price), –Ω–∞–ø—Ä–∏–º–µ—Ä "2477" ')
        await screenv2_states.next()


@dp.message_handler(state=screenv2_states.Q6)
async def main(message: types.Message, state: FSMContext):
    answer = message.text.lstrip().lower()
    if not(DrawScreen.is_number(answer)):
        await state.finish()
        await message.answer(f'–û—à–∏–±–∫–∞, —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)
    else:
        await state.update_data(current_price =answer)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ä–∏—Å–∫ (–±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ)', reply_markup=markup)
        await screenv2_states.next()

@dp.message_handler(state = screenv2_states.Q7)
async def main(message: types.Message, state: FSMContext):

    answer = message.text.lstrip().lower()
    if (DrawScreen.is_number(answer)):
        await state.update_data(risk =answer)
        data = await state.get_data()
        await state.finish()
        await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç–æ–∫', reply_markup=markup)
        
        DrawScreen.drawscreen(data, message.from_user.id)
        
        photo = InputFile(f"main/images/{message.from_user.id}_img.jpg")
        await bot.send_photo(message.from_user.id, photo, reply_markup=markup)
        DrawScreen.delete_screen(chat_id=message.from_user.id)
    else: 
        await bot.send_message(chat_id=message.from_user.id, text = '–û—à–∏–±–∫–∞, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π')
        await bot.send_message(chat_id=message.from_user.id, text = f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: /make_screen', reply_markup=markup)

    

    



